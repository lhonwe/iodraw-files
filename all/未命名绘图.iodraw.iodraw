<mxfile host="Electron" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) iodraw/3.5.1 Chrome/124.0.6367.49 Electron/30.0.0 Safari/537.36" version="24.7.17">
  <diagram name="第 1 页" id="3jCiMRDL9z3XifFpF_ix">
    <mxGraphModel dx="954" dy="620" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <UserObject label="# 用户支付流程详细流程图&#xa;&#xa;## 整体流程概述&#xa;&#xa;用户支付流程主要包含四个核心步骤：获取会员套餐、创建订单、提交支付订单、处理支付回调。以下是详细的流程分析和流程图。&#xa;&#xa;```&#xa;+----------------+     +----------------+     +----------------+     +----------------+&#xa;|                |     |                |     |                |     |                |&#xa;|  1. 获取会员   |----&amp;gt;|  2. 创建订单   |----&amp;gt;|  3. 提交支付   |----&amp;gt;|  4. 处理支付   |&#xa;|    套餐列表    |     |                |     |    订单       |     |    回调       |&#xa;|                |     |                |     |                |     |                |&#xa;+----------------+     +----------------+     +----------------+     +----------------+&#xa;```&#xa;&#xa;## 详细流程说明&#xa;&#xa;### 1. 获取会员套餐（AppVipPlanController.list）&#xa;&#xa;```&#xa;用户 ---&amp;gt; AppVipPlanController.list() ---&amp;gt; VipPlanService.getVipPlans(type) ---&amp;gt; 返回会员套餐列表&#xa;```&#xa;&#xa;- **请求处理**：用户通过App调用`AppVipPlanController.list()`接口&#xa;- **业务逻辑**：控制器调用`VipPlanService.getVipPlans(type)`获取VIP类型的套餐&#xa;- **返回结果**：返回会员套餐列表给前端展示&#xa;&#xa;### 2. 创建订单（AppVipOrderController.createOrder）&#xa;&#xa;```&#xa;用户 ---&amp;gt; AppVipOrderController.createOrder() ---&amp;gt; VipOrderService.createOrder()&#xa;                                                       |&#xa;                                                       v&#xa;                          +----------------+     +----------------+     +----------------+&#xa;                          |                |     |                |     |                |&#xa;                          |  创建VipOrderDO|&amp;lt;---|  保存订单记录  |---&amp;gt;|  创建支付订单  |&#xa;                          |                |     |                |     |                |&#xa;                          +----------------+     +----------------+     +----------------+&#xa;                                                                          |&#xa;                                                                          v&#xa;                                                      +----------------+     +----------------+&#xa;                                                      |                |     |                |&#xa;                                                      |  更新支付订单ID|&amp;lt;---|  返回支付订单ID|&#xa;                                                      |   到业务订单   |     |                |&#xa;                                                      +----------------+     +----------------+&#xa;```&#xa;&#xa;- **请求处理**：用户选择套餐后，调用`AppVipOrderController.createOrder()`接口&#xa;- **用户识别**：通过`getLoginUserId()`获取当前登录用户ID&#xa;- **业务处理**：&#xa;  - 创建`VipOrderDO`对象并保存到数据库&#xa;  - 调用`payOrderApi.createOrder()`创建支付订单&#xa;  - 将支付订单ID关联到业务订单&#xa;- **返回结果**：返回支付订单ID&#xa;&#xa;### 3. 提交支付订单（AppPayOrderController.submitPayOrder）&#xa;&#xa;```&#xa;用户 ---&amp;gt; AppPayOrderController.submitPayOrder() ---&amp;gt; PayOrderService.submitOrder()&#xa;                                                          |&#xa;                                                          v&#xa;                                          +----------------+     +----------------+&#xa;                                          |                |     |                |&#xa;                                          |  处理特殊支付  |---&amp;gt;|  调用支付渠道  |&#xa;                                          |  方式(如钱包)  |     |    进行支付    |&#xa;                                          +----------------+     +----------------+&#xa;                                                                      |&#xa;                                                                      v&#xa;                                                    +----------------+     +----------------+&#xa;                                                    |                |     |                |&#xa;                                                    |  返回支付处理  |---&amp;gt;|  返回给前端    |&#xa;                                                    |    结果        |     |    支付信息    |&#xa;                                                    +----------------+     +----------------+&#xa;```&#xa;&#xa;- **请求处理**：用户确认支付信息后，调用`AppPayOrderController.submitPayOrder()`接口&#xa;- **特殊处理**：对特殊支付方式如钱包支付进行额外处理&#xa;- **支付提交**：调用`PayOrderService.submitOrder()`向支付渠道提交支付请求&#xa;- **返回结果**：将支付渠道返回的支付信息处理后返回给前端，用户进行实际支付操作&#xa;&#xa;### 4. 处理支付回调（PayNotifyController.notifyOrder）&#xa;&#xa;```&#xa;第三方支付平台 ---&amp;gt; PayNotifyController.notifyOrder() ---&amp;gt; PayOrderService.notifyOrder()&#xa;                                                                   |&#xa;                                                                   v&#xa;                                           +----------------+     +----------------+&#xa;                                           |                |     |                |&#xa;                                           |  更新支付订单  |---&amp;gt;|  创建支付通知  |&#xa;                                           |    状态        |     |    任务        |&#xa;                                           +----------------+     +----------------+&#xa;                                                                            |&#xa;                                                                            v&#xa;                                                        +----------------+     +----------------+&#xa;                                                        |                |     |                |&#xa;                                                        |  异步执行通知  |---&amp;gt;|  回调业务系统  |&#xa;                                                        |    任务        |     |  (如会员模块)  |&#xa;                                                        +----------------+     +----------------+&#xa;                                                                                    |&#xa;                                                                                    v&#xa;                                                              +----------------+     +----------------+&#xa;                                                              |                |     |                |&#xa;                                                              |  更新业务订单  |---&amp;gt;|  处理业务逻辑  |&#xa;                                                              |    状态        |     |  (如会员权益)  |&#xa;                                                              +----------------+     +----------------+&#xa;```&#xa;&#xa;- **回调接收**：第三方支付平台（如Apple、Alipay等）支付成功后，调用`PayNotifyController.notifyOrder()`接口&#xa;- **数据验证**：验证支付渠道是否存在，解析通知数据&#xa;- **订单处理**：调用`PayOrderService.notifyOrder()`更新支付订单状态&#xa;- **通知创建**：创建支付通知任务，异步通知业务系统&#xa;- **业务回调**：业务系统（如会员模块的`AppVipOrderCallbackController.updateOrderPaid()`）接收通知，更新业务订单状态，并处理相关业务逻辑（如更新会员权益、创建订阅信息等）&#xa;&#xa;## 关键服务与组件&#xa;&#xa;1. **AppVipPlanController**：处理会员套餐相关请求&#xa;2. **AppVipOrderController**：处理会员订单创建请求&#xa;3. **AppPayOrderController**：处理支付订单提交请求&#xa;4. **PayNotifyController**：处理第三方支付回调&#xa;5. **VipOrderService**：会员订单相关业务逻辑&#xa;6. **PayOrderService**：支付订单相关业务逻辑&#xa;7. **PayNotifyService**：支付通知相关业务逻辑&#xa;&#xa;## 数据流向&#xa;&#xa;1. **前端到后端**：用户操作触发API请求&#xa;2. **业务层到支付层**：创建订单、提交支付请求&#xa;3. **第三方支付到系统**：支付结果回调通知&#xa;4. **支付层到业务层**：支付结果内部通知&#xa;&#xa;## 异常处理机制&#xa;&#xa;1. **支付重试机制**：通过`PayNotifyTaskDO`实现通知重试&#xa;2. **幂等性保障**：通过订单状态校验、分布式锁等确保操作的幂等性&#xa;3. **事务管理**：关键操作使用事务确保数据一致性&#xa;&#xa;## 时序图&#xa;&#xa;```markdown&#xa;用户           App层          Service层         第三方支付        回调系统&#xa; |              |                |                 |                |&#xa; |--获取套餐---&amp;gt; |                |                 |                |&#xa; |              |--查询套餐---&amp;gt;  |                 |                |&#xa; |              |                |--返回套餐列表--&amp;gt;|                |&#xa; |              |&amp;lt;---------------|                 |                |&#xa; |&amp;lt;-------------|                 |                 |                |&#xa; |              |                |                 |                |&#xa; |--创建订单---&amp;gt; |                |                 |                |&#xa; |              |--创建订单---&amp;gt;  |                 |                |&#xa; |              |                |--创建支付单---&amp;gt; |                |&#xa; |              |                |&amp;lt;---------------|                |&#xa; |              |&amp;lt;---------------|                 |                |&#xa; |&amp;lt;-------------|                 |                 |                |&#xa; |              |                |                 |                |&#xa; |--提交支付---&amp;gt; |                |                 |                |&#xa; |              |--提交支付---&amp;gt;  |                 |                |&#xa; |              |                |--发起支付请求--&amp;gt;|                |&#xa; |              |                |&amp;lt;---------------|                |&#xa; |              |&amp;lt;---------------|                 |                |&#xa; |&amp;lt;-------------|                 |                 |                |&#xa; |              |                |                 |                |&#xa; |              |                |                 |--支付回调---&amp;gt;  |&#xa; |              |                |&amp;lt;----------------|                |&#xa; |              |                |--处理回调---&amp;gt;   |                |&#xa; |              |                |                |--内部通知---&amp;gt;  |&#xa; |              |                |&amp;lt;---------------|                |&#xa; |              |                |--更新订单状态--&amp;gt;|                |&#xa; |              |                |--处理业务逻辑--&amp;gt;|                |&#xa; |              |                |                 |                |&#xa;```" link="# 用户支付流程详细流程图&#xa;&#xa;## 整体流程概述&#xa;&#xa;用户支付流程主要包含四个核心步骤：获取会员套餐、创建订单、提交支付订单、处理支付回调。以下是详细的流程分析和流程图。&#xa;&#xa;```&#xa;+----------------+     +----------------+     +----------------+     +----------------+&#xa;|                |     |                |     |                |     |                |&#xa;|  1. 获取会员   |----&amp;gt;|  2. 创建订单   |----&amp;gt;|  3. 提交支付   |----&amp;gt;|  4. 处理支付   |&#xa;|    套餐列表    |     |                |     |    订单       |     |    回调       |&#xa;|                |     |                |     |                |     |                |&#xa;+----------------+     +----------------+     +----------------+     +----------------+&#xa;```&#xa;&#xa;## 详细流程说明&#xa;&#xa;### 1. 获取会员套餐（AppVipPlanController.list）&#xa;&#xa;```&#xa;用户 ---&amp;gt; AppVipPlanController.list() ---&amp;gt; VipPlanService.getVipPlans(type) ---&amp;gt; 返回会员套餐列表&#xa;```&#xa;&#xa;- **请求处理**：用户通过App调用`AppVipPlanController.list()`接口&#xa;- **业务逻辑**：控制器调用`VipPlanService.getVipPlans(type)`获取VIP类型的套餐&#xa;- **返回结果**：返回会员套餐列表给前端展示&#xa;&#xa;### 2. 创建订单（AppVipOrderController.createOrder）&#xa;&#xa;```&#xa;用户 ---&amp;gt; AppVipOrderController.createOrder() ---&amp;gt; VipOrderService.createOrder()&#xa;                                                       |&#xa;                                                       v&#xa;                          +----------------+     +----------------+     +----------------+&#xa;                          |                |     |                |     |                |&#xa;                          |  创建VipOrderDO|&amp;lt;---|  保存订单记录  |---&amp;gt;|  创建支付订单  |&#xa;                          |                |     |                |     |                |&#xa;                          +----------------+     +----------------+     +----------------+&#xa;                                                                          |&#xa;                                                                          v&#xa;                                                      +----------------+     +----------------+&#xa;                                                      |                |     |                |&#xa;                                                      |  更新支付订单ID|&amp;lt;---|  返回支付订单ID|&#xa;                                                      |   到业务订单   |     |                |&#xa;                                                      +----------------+     +----------------+&#xa;```&#xa;&#xa;- **请求处理**：用户选择套餐后，调用`AppVipOrderController.createOrder()`接口&#xa;- **用户识别**：通过`getLoginUserId()`获取当前登录用户ID&#xa;- **业务处理**：&#xa;  - 创建`VipOrderDO`对象并保存到数据库&#xa;  - 调用`payOrderApi.createOrder()`创建支付订单&#xa;  - 将支付订单ID关联到业务订单&#xa;- **返回结果**：返回支付订单ID&#xa;&#xa;### 3. 提交支付订单（AppPayOrderController.submitPayOrder）&#xa;&#xa;```&#xa;用户 ---&amp;gt; AppPayOrderController.submitPayOrder() ---&amp;gt; PayOrderService.submitOrder()&#xa;                                                          |&#xa;                                                          v&#xa;                                          +----------------+     +----------------+&#xa;                                          |                |     |                |&#xa;                                          |  处理特殊支付  |---&amp;gt;|  调用支付渠道  |&#xa;                                          |  方式(如钱包)  |     |    进行支付    |&#xa;                                          +----------------+     +----------------+&#xa;                                                                      |&#xa;                                                                      v&#xa;                                                    +----------------+     +----------------+&#xa;                                                    |                |     |                |&#xa;                                                    |  返回支付处理  |---&amp;gt;|  返回给前端    |&#xa;                                                    |    结果        |     |    支付信息    |&#xa;                                                    +----------------+     +----------------+&#xa;```&#xa;&#xa;- **请求处理**：用户确认支付信息后，调用`AppPayOrderController.submitPayOrder()`接口&#xa;- **特殊处理**：对特殊支付方式如钱包支付进行额外处理&#xa;- **支付提交**：调用`PayOrderService.submitOrder()`向支付渠道提交支付请求&#xa;- **返回结果**：将支付渠道返回的支付信息处理后返回给前端，用户进行实际支付操作&#xa;&#xa;### 4. 处理支付回调（PayNotifyController.notifyOrder）&#xa;&#xa;```&#xa;第三方支付平台 ---&amp;gt; PayNotifyController.notifyOrder() ---&amp;gt; PayOrderService.notifyOrder()&#xa;                                                                   |&#xa;                                                                   v&#xa;                                           +----------------+     +----------------+&#xa;                                           |                |     |                |&#xa;                                           |  更新支付订单  |---&amp;gt;|  创建支付通知  |&#xa;                                           |    状态        |     |    任务        |&#xa;                                           +----------------+     +----------------+&#xa;                                                                            |&#xa;                                                                            v&#xa;                                                        +----------------+     +----------------+&#xa;                                                        |                |     |                |&#xa;                                                        |  异步执行通知  |---&amp;gt;|  回调业务系统  |&#xa;                                                        |    任务        |     |  (如会员模块)  |&#xa;                                                        +----------------+     +----------------+&#xa;                                                                                    |&#xa;                                                                                    v&#xa;                                                              +----------------+     +----------------+&#xa;                                                              |                |     |                |&#xa;                                                              |  更新业务订单  |---&amp;gt;|  处理业务逻辑  |&#xa;                                                              |    状态        |     |  (如会员权益)  |&#xa;                                                              +----------------+     +----------------+&#xa;```&#xa;&#xa;- **回调接收**：第三方支付平台（如Apple、Alipay等）支付成功后，调用`PayNotifyController.notifyOrder()`接口&#xa;- **数据验证**：验证支付渠道是否存在，解析通知数据&#xa;- **订单处理**：调用`PayOrderService.notifyOrder()`更新支付订单状态&#xa;- **通知创建**：创建支付通知任务，异步通知业务系统&#xa;- **业务回调**：业务系统（如会员模块的`AppVipOrderCallbackController.updateOrderPaid()`）接收通知，更新业务订单状态，并处理相关业务逻辑（如更新会员权益、创建订阅信息等）&#xa;&#xa;## 关键服务与组件&#xa;&#xa;1. **AppVipPlanController**：处理会员套餐相关请求&#xa;2. **AppVipOrderController**：处理会员订单创建请求&#xa;3. **AppPayOrderController**：处理支付订单提交请求&#xa;4. **PayNotifyController**：处理第三方支付回调&#xa;5. **VipOrderService**：会员订单相关业务逻辑&#xa;6. **PayOrderService**：支付订单相关业务逻辑&#xa;7. **PayNotifyService**：支付通知相关业务逻辑&#xa;&#xa;## 数据流向&#xa;&#xa;1. **前端到后端**：用户操作触发API请求&#xa;2. **业务层到支付层**：创建订单、提交支付请求&#xa;3. **第三方支付到系统**：支付结果回调通知&#xa;4. **支付层到业务层**：支付结果内部通知&#xa;&#xa;## 异常处理机制&#xa;&#xa;1. **支付重试机制**：通过`PayNotifyTaskDO`实现通知重试&#xa;2. **幂等性保障**：通过订单状态校验、分布式锁等确保操作的幂等性&#xa;3. **事务管理**：关键操作使用事务确保数据一致性&#xa;&#xa;## 时序图&#xa;&#xa;```markdown&#xa;用户           App层          Service层         第三方支付        回调系统&#xa; |              |                |                 |                |&#xa; |--获取套餐---&amp;gt; |                |                 |                |&#xa; |              |--查询套餐---&amp;gt;  |                 |                |&#xa; |              |                |--返回套餐列表--&amp;gt;|                |&#xa; |              |&amp;lt;---------------|                 |                |&#xa; |&amp;lt;-------------|                 |                 |                |&#xa; |              |                |                 |                |&#xa; |--创建订单---&amp;gt; |                |                 |                |&#xa; |              |--创建订单---&amp;gt;  |                 |                |&#xa; |              |                |--创建支付单---&amp;gt; |                |&#xa; |              |                |&amp;lt;---------------|                |&#xa; |              |&amp;lt;---------------|                 |                |&#xa; |&amp;lt;-------------|                 |                 |                |&#xa; |              |                |                 |                |&#xa; |--提交支付---&amp;gt; |                |                 |                |&#xa; |              |--提交支付---&amp;gt;  |                 |                |&#xa; |              |                |--发起支付请求--&amp;gt;|                |&#xa; |              |                |&amp;lt;---------------|                |&#xa; |              |&amp;lt;---------------|                 |                |&#xa; |&amp;lt;-------------|                 |                 |                |&#xa; |              |                |                 |                |&#xa; |              |                |                 |--支付回调---&amp;gt;  |&#xa; |              |                |&amp;lt;----------------|                |&#xa; |              |                |--处理回调---&amp;gt;   |                |&#xa; |              |                |                |--内部通知---&amp;gt;  |&#xa; |              |                |&amp;lt;---------------|                |&#xa; |              |                |--更新订单状态--&amp;gt;|                |&#xa; |              |                |--处理业务逻辑--&amp;gt;|                |&#xa; |              |                |                 |                |&#xa;```" id="Ha5y4Y0Qu6BZhU-vQfvo-1">
          <mxCell style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
            <mxGeometry width="560" height="2510" as="geometry" />
          </mxCell>
        </UserObject>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
